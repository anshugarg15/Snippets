<snippet>
	<content><![CDATA[

struct dynode{
    ll val;
    int l,r;
    dynode(): l(-1), r(-1){}
};
const int Q=100001;
const int LOGN=30;
const int NN=Q*4*LOGN;
struct dySeg {

    dynode tree[NN];
    ll lazy[NN];
    int cursz=0;
    int r;

    dySeg () {
        r = cursz++;
    }
    inline void eval(int v,int l,int r)
    {
        tree[v].val=0;
    }
    inline void extend (int u, int l, int r)
    {
        int mid=(l+r)/2;
        if(tree[u].l!=-1)
            return ;
        int v = cursz++;
        tree[u].l=v;
        eval(v,l,mid);

        v=cursz++;
        tree[u].r=v;
        eval(v,mid+1,r);
    }

    void update(int v,int st,int en,int idx,ll val)
    {
        if(st==en)
        {
            tree[v].val=val;
            return ;
        }
        int mid=(st+en)/2;

        extend(v,st,en);
        if(idx<=mid)
            update(tree[v].l,st,mid,idx,val);
        else
            update(tree[v].r,mid+1,en,idx,val);
        tree[v].val=tree[tree[v].l].val+tree[tree[v].r].val;
    }
    inline void pushdown(int v,int l,int r)
    {
        tree[v].val+=(r-l+1)*lazy[v];
        if(l!=r)
        {
            extend(v,l,r);
            lazy[tree[v].l]+=lazy[v];
            lazy[tree[v].r]+=lazy[v];
        }
        lazy[v]=0;
    }
    void rupdate(int v,int st,int en,int l,int r,ll val)
    {
        if(lazy[v]!=0)
            pushdown(v,st,en);
        if(st>r || en<l)
            return ;
        if(st>=l && en<=r)
        {
            lazy[v]=val;
            pushdown(v,st,en);
            return ;
        }
        extend(v,st,en);

        int mid=(st+en)/2;
        rupdate(tree[v].l,st,mid,l,r,val);
        rupdate(tree[v].r,mid+1,en,l,r,val);
        tree[v].val=tree[tree[v].l].val+tree[tree[v].r].val;
    }

    ll query(int v,int st,int en,int l,int r)
    {
        if(lazy[v]!=0)
            pushdown(v,st,en);
        if(st>r || en<l)
            return 0;
        if(st>=l && en<=r)
            return tree[v].val;

        int mid=(st+en)/2;
        extend(v,st,en);
        return query(tree[v].l,st,mid,l,r)+query(tree[v].r,mid+1,en,l,r);

    }

};
// change eval 
// base value in query , combine 
// Q value and LOGN value
// set the value of the root manually 
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>dynamicseg</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
