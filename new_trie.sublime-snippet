<snippet>
	<content><![CDATA[
struct TRIE {
    vector<array<int, 2>> next;
    vector<long long> cnt;
    static const int B = 30;
    int root, cur;

    TRIE() {
        next.push_back({-1, -1});
        cnt.push_back(0);
        root = 0;
        cur = 1;
    }
    void insert(long long x) {
        int tmp = root;
        ++cnt[tmp];
        for(int i=B;i>=0;--i) {
            if(x & (1LL << i)) {
                if(next[tmp][1] == -1) {
                    next[tmp][1] = cur++;
                    next.push_back({-1, -1});
                    cnt.push_back(0);
                }
                tmp = next[tmp][1];
            }
            else {
                if(next[tmp][0] == -1) {
                    next[tmp][0] = cur++;
                    next.push_back({-1, -1});
                    cnt.push_back(0);
                }
                tmp = next[tmp][0];
            }
            ++cnt[tmp];
        }
    }
    void erase(long long x) {
        int tmp = root;
        --cnt[tmp];
        for(int i=B;i>=0;--i) {
            if(x & (1LL << i)) {
                tmp = next[tmp][1];
            }
            else {
                tmp = next[tmp][0];
            }
            --cnt[tmp];
        }
    }
    long long q_max(long long x) {
        int tmp = root;
        long long ans = 0;
        if(cnt[tmp] == 0) {
            return -1;
        }
        for(int i=B;i>=0;--i) {
            if(x & (1LL << i)) {
                if(next[tmp][0] != -1 && cnt[next[tmp][0]] > 0) {
                    tmp = next[tmp][0];
                    ans += 1LL << i;
                }
                else {  
                    tmp = next[tmp][1];
                }
            }
            else {
                if(next[tmp][1] != -1 && cnt[next[tmp][1]] > 0) {
                    tmp = next[tmp][1];
                    ans += 1LL << i;
                }
                else {  
                    tmp = next[tmp][0];
                }
            }
        }
        return ans;
    }
    void clear() {
        next.clear();
        cnt.clear();
        root = 0;
        next.push_back({-1, -1});
        cnt.push_back(0);
        cur = 1;
    }
};
// change msb accordingly

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>new_trie</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
