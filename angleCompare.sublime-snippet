<snippet>
	<content><![CDATA[
template<typename T = long long>
struct Point
{
    T x,y;
    Point() : x(0),y(0) {}
    Point(T x_,T y_): x(x_),y(y_) {}
    friend Point operator-(const Point &a, const Point &b) { return Point(a.x-b.x,a.y-b.y); }
    friend Point operator+(const Point &a, const Point &b) { return Point(a.x+b.x,a.y+b.y); }
    friend ostream& operator << (ostream &stream, const Point &P) { return stream<<"("<<P.x<<","<<P.y<<")"; }
    long long abs() { return x*x + y*y; }
};
template<typename T>
T dot(const Point<T> &a,const Point<T> &b)
{
    return a.x*b.x+a.y*b.y;
}
template<typename T>
T cross(const Point<T> &a,const Point<T> &b)
{
    return a.x*b.y-b.x*a.y;
}
using Pt = Point<ll> ;
struct AngCmp
{
    // centred at origin and anticlockwise relative to V;
    Pt origin,V;
    AngCmp(Pt a,Pt b): origin(a),V(b) {}

    bool operator() (const Pt &a,const Pt &b) const
    {
        Pt A = a-origin;
        Pt B = b-origin;

        bool x = cross(V,A)>=0;
        bool y = cross(V,B)>=0;
        if(x^y)
            return x;
        ll u = cross(A,B);
        if(u != 0)
            return u > 0;
        ll ux = dot(A,B);
        ll vx = dot(A,V);
        if(ux < 0)
            return vx > 0;
        // change here for same polar angle
        return A.abs()>B.abs();
    }
};

// AngCmp cmp(Pt(0,0),Pt(1,0)) <-- Like this
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	 <tabTrigger>PolarSort</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
