<snippet>
	<content><![CDATA[
vector<int> g[N];

int AuxillaryTree(vector<int> &v)
{
    sort(all(v),[&](int x,int y)
    {
        return in[x]<in[y];
    });
    int nx = sz(v);
    for(int i=0;i<nx-1;++i)
        v.push_back(lca(v[i],v[i+1]));
    sort(all(v),[&](int x,int y)
    {
        return in[x]<in[y];
    });
    v.resize(unique(all(v))-v.begin());
    vector<int> ed;
    auto isAncestor = [&](int x,int y)
    {
        return in[y]>=in[x] && in[y]<=out[x];
    };
    for(int j:v)
    {
        g[j].clear();
    }
    nx = sz(v);
    ed.pb(v[0]);
    for(int i=1;i<nx;++i)
    {
        while(!isAncestor(ed.back(),v[i]))
            ed.pop_back();
        g[ed.back()].pb(v[i]);
        ed.pb(v[i]);
    }
    return ed[0];
}

void print(int s,int p)
{
    cout<<s<<" ";
    for(int j:g[s])
        if(j!=p)
            print(j,s);
}]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>auxTree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
