<snippet>
	<content><![CDATA[
struct node{
	ll val,L,R;
	node (): L(-1),R(-1),val(0){};
	node(ll x) : L(-1),R(-1),val(x){};
};
struct PERTREE{
	node tree[NN];
	int cursz=0;
	ll buildTree(ll st,ll en)
	{
		ll v = cursz++;
		tree[v]=node();
		if(st==en)
			return v;
		ll mid=(st+en)>>1;
		tree[v].L=buildTree(st,mid);
		tree[v].R=buildTree(mid+1,en); 
		return v;
	}
	ll update(ll v,ll st,ll en,ll pos,ll val)
	{
		ll u=cursz++;
		tree[u]=node(tree[v].val+val);
		// current value + value jo merko add karni hai is my answer //
		// and is node ko update karna hai islie hi ispe call hua hai function
		if(st==en)
			return u;
		// agar leaf hai to seedha return kar do wrna left ya right jisko update karna ho kar do
		// just re adjusting the pointers and combining the updates....
		ll mid=(st+en)>>1;
		if(pos<=mid)
			tree[u].L=update(tree[v].L,st,mid,pos,val);
		else 
			tree[u].R=update(tree[v].R,mid+1,en,pos,val);
		tree[u].L=(tree[u].L==-1)?tree[v].L:tree[u].L;
		tree[u].R=(tree[u].R==-1)?tree[v].R:tree[u].R;
		return u;
	}
	ll query(ll v,ll st,ll en,ll k)
	{
		if(tree[v].val<=k)
			return en+1;
		if(st==en)
			return st;
		ll mid=(st+en)>>1;
		if(k<tree[tree[v].L].val)
			return query(tree[v].L,st,mid,k);
		else
			return query(tree[v].R,mid+1,en,k-tree[tree[v].L].val);
	}
};]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>PERTREE</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
