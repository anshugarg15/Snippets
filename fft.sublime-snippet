<snippet>
	<content><![CDATA[
//***************FFT optimized code************//
typedef complex<double> base;

void fft(vector<base> &a,bool invert)
{
	int n=(int)a.size();
	for(int i=1,j=0;i<n ;++i)
	{
		int bit=n>>1;
		for(;j>=bit;bit>>=1)
			j-=bit;
		j+=bit;
		if(i<j)
			swap(a[i],a[j]);
	}
	for(int len=2;len<=n;len<<=1)
	{
		double angle=2*PI/len*(invert?-1:1);
		// w_len is omega for this len
		base w_len(cos(angle),sin(angle)),w(1);
		// yaha se apna root to aa gaya 
		base pow[len/2];
		// bas uski aadhi powers ye rahi aur bachi aadhi inki negative hongi
		// imagine at argand plane for nth roots of unity
		pow[0]=w;
		for(int i=1;i<len/2;++i)
			pow[i]=pow[i-1]*w_len;
		for(int i=0;i<n;i+=len)
		{
			for(int j=0;j<len/2;++j)
			{
				base u=a[i+j],v=a[i+j+len/2]*pow[j];
				a[i+j]=u+v;
				a[i+j+len/2]=u-v;
			}
		}
	}
	if(invert)
		for(int i=0;i<n;++i)
			a[i]/=n;
}
void multiply(vector<ll> &a,vector<ll> &b,vector<ll> &res)
{
	int x=max((int)a.size(),(int)b.size());
	int n=1;
	vector<base> fa(all(a)),fb(all(b));
	while(n<x)n<<=1;
	n<<=1;
	fa.resize(n);fb.resize(n);
	fft(fa,false);fft(fb,false);
	for(int i=0;i<n;++i)
		fa[i]*=fb[i];
	fft(fa,true);
	res.resize(n);
	for(int i=0;i<n;++i)
	{
		res[i]=(ll)(fa[i].real()+0.5);
	}
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>fft</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
